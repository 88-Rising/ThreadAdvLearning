package FirstStep;

public class Lock {

    /*
    * 乐观锁：
    * 设计思想：认为任务处理总是很快能够得到执行，引入原始值，修改值，期望值来做判断处理，r
    *      如果是满足期望的条件，就能够判断是否发生错误。
    * 悲观锁：
    *   任务执行总是不安全的，所在需要把所有操作都加锁,之后是安全的但是效率比较低
    *
    * CAS本身是属于乐观锁Compare and Swap
    *    1.(自旋锁)自旋的方式：时间+次数的循环处理，如果不满足预期条件就一直循环处理。
    *    2.ABA问题（期间发售了修改，但是满足预期值）解决办法增加版本号
    *    3.使用场景：代码可以得到很快的执行 如果不满足这个要求效率就会下降，CAS并不会阻塞线程，而是在不停的运行状态下，调用方法尝试设置值
    *        但正因如此所以对于代码执行时间很长的操作，会导致其他线程调用方法长时间处于空跑
    * */

}
